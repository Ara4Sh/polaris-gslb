#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import socket
import os

import daemon

import polaris_health.config
from polaris_health.runtime import Runtime
from polaris_health.util import log


class PolarisHealthControl:


    def __init__(self, debug=False):
        self.debug = debug

        if self.debug:
            log.setup_debug()
        else:
            log.setup()

        # this will load polaris_health.config
        Runtime.load_configuration()

    def start(self):
        """Start Polaris health 

        In debug the app will not daemonize
        """
        # check if Polaris is already running
        if os.path.exists(polaris_health.config.BASE['CONTROL_SOCKET_FILE']):
            try:    
                if self.send_control_sock_cmd('ping') == 'pong':
                    raise Exception('Polaris health is already running')
            except OSError:
                pass

        if self.debug:
            Runtime().start()
        else:
            log.setup()
            # turn into a daemon, no code will execute after this
            with daemon.DaemonContext():
                Runtime().start()

    def stop(self):
        """Stop Polaris health 
        """
        # check if Polaris is running
        if os.path.exists(polaris_health.config.BASE['CONTROL_SOCKET_FILE']):
            try:    
                if self.send_control_sock_cmd('ping') == 'pong':
                    raise Exception('Polaris health is already running')
            except OSError:
                pass

        if self.debug:
            Runtime().start()
        else:
            log.setup()
            # turn into a daemon, no code will execute after this
            with daemon.DaemonContext():
                Runtime().start()





    def send_control_sock_cmd(self, cmd):
        """Connect to control socket, send cmd, 
        return the response received"""    
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect(polaris_health.config.BASE['CONTROL_SOCKET_FILE'])
        sock.sendall(cmd.encode())
        resp = sock.recv(64).decode()
        sock.close()

        return resp

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Polaris health control")

    parser.add_argument('action',
                        choices=[
                            'start',
                            'start-debug',
                            ]) 

    opts = parser.parse_args()

    if 'debug' in opts.action:
        phc = PolarisHealthControl(debug=True)
    else:
        phc = PolarisHealthControl(debug=False)      

    if opts.action == 'start' or opts.action == 'start-debug':
        phc.start()

