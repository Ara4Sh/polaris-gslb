#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import socket
import os
import time
import json

import memcache
import daemon

from  polaris_health import config, runtime


# control socket recv() buffer size
CONTROL_SOCKET_RECV_BUFF_SIZE = 256


def main():
    parser = argparse.ArgumentParser(
        description="Polaris health control")
    parser.add_argument('action',
                        choices=[
                            'ping',
                            'start',
                            'start-debug',
                            'stop',
                            'get-generic-state',
                            'get-ppdns-state',
                            'get-heartbeat',
                            'check-heartbeat'
                            ]) 
    opts = parser.parse_args()

    phc = PolarisHealthControl()

    method = opts.action.replace('-', '_')
    getattr(phc, method)()


class PolarisHealthControl:

    def __init__(self):
        # load polaris_health.config
        runtime.Runtime.load_configuration()

        self._mc = memcache.Client([config.BASE['SHARED_MEM_HOSTNAME']])

    def ping(self):
        self._send_control_sock_cmd('ping') == 'pong'
        
    def start(self, debug=False):
        """In debug the app will not daemonize, logging level is set to debug,
        logs are sent to stdout
        """
        if self._is_running():
            raise Exception('Polaris health is already running')

        if debug:
            runtime.Runtime().start(debug=True)
        else:
            # turn into a daemon, NO CODE WILL EXECUTE AFTER THIS
            with daemon.DaemonContext():
                runtime.Runtime().start()

    def start_debug(self):
        self.start(debug=True)

    def stop(self):
        if not self._is_running(): 
            raise Exception('Polaris health is not running')

        self._send_control_sock_cmd('stop')

    def get_generic_state(self):
        """Get generic form of the state"""
        val = self._mc_get(config.BASE['SHARED_MEM_GENERIC_STATE_KEY'])
        print(json.dumps(val, indent=4))

    def get_ppdns_state(self):
        """Get ppdns form of the state"""
        val = self._mc_get(config.BASE['SHARED_MEM_PPDNS_STATE_KEY'])
        print(json.dumps(val, indent=4))

    def get_heartbeat(self):
        """Get Runtime's heartbeat"""
        val = self._mc_get(config.BASE['SHARED_MEM_HEARTBEAT_KEY'])
        obj = json.loads(val)
        human = time.asctime(time.gmtime(obj['timestamp']))
        print('timestamp: {} human readable: {}'
              .format(obj['timestamp'], human))

    def check_heartbeat(self):
        """Ensure the heartbeat is valid"""
        val = self._mc_get(config.BASE['SHARED_MEM_HEARTBEAT_KEY'])
        obj = json.loads(val)

        if time.time() - obj['timestamp'] > 5:
            raise Exception('aged timestamp: {}'.format(time_human))

    def _is_running(self):
        try:
            if self._send_control_sock_cmd('ping') == 'pong':
                return True
            else:
                return False
        except OSError:
            return False

    def _send_control_sock_cmd(self, cmd):
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect(config.BASE['CONTROL_SOCKET_FILE'])
        sock.sendall(cmd.encode())
        resp = sock.recv(CONTROL_SOCKET_RECV_BUFF_SIZE).decode()
        sock.close()
        return resp

    def _mc_get(self, key):    
        val = self._mc.get(key)
        if val is None:
            raise Exception('memcached get {} failed'.format(key))
        return val     


if __name__ == '__main__':
    main()

