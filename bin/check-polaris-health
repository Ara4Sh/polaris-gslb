#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Polaris_health health check"""

import json
import time

import memcache

MEMCACHED_HOSTNAME = '127.0.0.1'
HEARTBEAT_KEY = 'polaris_health:heartbeat'

class Status():

    def __init__(self):
        pass

    def ok(self, msg):
        print('OK: {}'.format(msg))

    def major(self, msg):
        print('MAJOR: {}'.format(msg))
        exit(1)

    def critical(self, msg):
        print('CRITICAL: {}'.format(msg))
        exit(2)

STATUS = Status()

def check_health():
    mc = memcache.Client([MEMCACHED_HOSTNAME])

    hb = mc.get(HEARTBEAT_KEY)
    if hb is None:
        STATUS.critical('failed to retrieve heartbeat')

    obj = json.loads(hb)

    if time.time() - obj['timestamp'] > 21:
        STATUS.critical('aged timestamp: {}'.
                format(time.asctime(time.gmtime(obj['timestamp']))))

    if obj['child_procs_alive'] != obj['child_procs_total']:
        STATUS.critical('child_procs_alive: {}, child_procs_total: {}'
                .format(obj['child_procs_alive'], obj['child_procs_total']))

    if obj['probe_req_queue_len'] > 100:
        STATUS.critical(
            'probe_req_queue_len: {}'.format(obj['probe_req_queue_len']))

    if obj['probe_resp_queue_len'] > 100:
        STATUS.critical(
            'probe_resp_queue_len: {}'.format(obj['probe_resp_queue_len']))

if __name__ == '__main__':
    check_health()
    STATUS.ok('all checks passed')

